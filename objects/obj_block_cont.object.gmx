<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create block container data structures
// Each chunk will be an array of grids representing each layer.
// For now, one chunk will be used for testing.
chunk = ds_list_create();
for(var i=0; i &lt; 256; i++) {
    var tempArray = array_create_2d(16, 16, "air");
    ds_list_add(chunk, tempArray);
}

// Generation will eventually be handled by another script
var tempArray = array_create_2d(16, 16, "grass");
ds_list_set(chunk, 0, tempArray);
tempArray = ds_list_find_value(chunk, 1);
tempArray[0, 0] = "grass";
ds_list_set(chunk, 1, tempArray);

grass_texture = sprite_get_texture(spr_grass_top, 0);
draw_set_color(c_white);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Free up the space taken by the chunk
ds_list_destroy(chunk);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the blocks stored in the chunks
var prev_layer = array_create_2d(16, 16, "air");
d3d_primitive_begin_texture(pr_trianglelist, grass_texture);
for(var i=255; i &gt;= 0; i--) {
    var layer = ds_list_find_value(chunk, i);
    var next_layer = ds_list_find_value(chunk, i-1);
    for(var j=0; j &lt; 16; j++) {
        for(var k=0; k &lt; 16; k++) {
            if(layer[j, k] == "grass") {
                //Top
                if(prev_layer[j, k] == "air") {
                    d3d_vertex_texture(j, k, i+1, 1, 0);
                    d3d_vertex_texture(j+1, k, i+1, 1, 1);
                    d3d_vertex_texture(j, k+1, i+1, 0, 0);
                    d3d_vertex_texture(j, k+1, i+1, 0, 0);
                    d3d_vertex_texture(j+1, k, i+1, 1, 1);
                    d3d_vertex_texture(j+1, k+1, i+1, 0, 1);
                }
                //Bottom
                if(is_undefined(next_layer) || next_layer[j, k] == "air") {
                    d3d_vertex_texture(j, k, i, 0, 0);
                    d3d_vertex_texture(j, k+1, i, 1, 0);
                    d3d_vertex_texture(j+1, k, i, 0, 1);
                    d3d_vertex_texture(j+1, k, i, 0, 1);
                    d3d_vertex_texture(j, k+1, i, 1, 0);
                    d3d_vertex_texture(j+1, k+1, i, 1, 1);
                }
                //X+
                if(j == 15 || layer[j+1, k] == "air") {
                    d3d_vertex_texture(j+1, k, i, 0, 1);
                    d3d_vertex_texture(j+1, k+1, i, 0, 0);
                    d3d_vertex_texture(j+1, k, i+1, 1, 1);
                    d3d_vertex_texture(j+1, k, i+1, 1, 1);
                    d3d_vertex_texture(j+1, k+1, i, 0, 0);
                    d3d_vertex_texture(j+1, k+1, i+1, 1, 0);
                }
                //Y+
                if(k == 15 || layer[j, k+1] == "air") {
                    d3d_vertex_texture(j+1, k+1, i, 0, 1);
                    d3d_vertex_texture(j, k+1, i, 0, 0);
                    d3d_vertex_texture(j+1, k+1, i+1, 1, 1);
                    d3d_vertex_texture(j+1, k+1, i+1, 1, 1);
                    d3d_vertex_texture(j, k+1, i, 0, 0);
                    d3d_vertex_texture(j, k+1, i+1, 1, 0);
                }
                //X-
                if(j == 0 || layer[j-1, k] == "air") {
                    d3d_vertex_texture(j, k+1, i, 0, 1);
                    d3d_vertex_texture(j, k, i, 0, 0);
                    d3d_vertex_texture(j, k+1, i+1, 1, 1);
                    d3d_vertex_texture(j, k+1, i+1, 1, 1);
                    d3d_vertex_texture(j, k, i, 0, 0);
                    d3d_vertex_texture(j, k, i+1, 1, 0);
                }
                //Y-
                if(k == 0 || layer[j, k-1] == "air") {
                    d3d_vertex_texture(j, k, i, 0, 1);
                    d3d_vertex_texture(j+1, k, i, 0, 0);
                    d3d_vertex_texture(j, k, i+1, 1, 1);
                    d3d_vertex_texture(j, k, i+1, 1, 1);
                    d3d_vertex_texture(j+1, k, i, 0, 0);
                    d3d_vertex_texture(j+1, k, i+1, 1, 0);
                }
            }
        }
    }
    prev_layer = layer;
}
d3d_primitive_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
